// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    RAM8(in=in, address=address[0..2], load=a, out=rama);
    RAM8(in=in, address=address[0..2], load=b, out=ramb);
    RAM8(in=in, address=address[0..2], load=c, out=ramc);
    RAM8(in=in, address=address[0..2], load=d, out=ramd);
    RAM8(in=in, address=address[0..2], load=e, out=rame);
    RAM8(in=in, address=address[0..2], load=f, out=ramf);
    RAM8(in=in, address=address[0..2], load=g, out=ramg);
    RAM8(in=in, address=address[0..2], load=h, out=ramh);
    Mux8Way16(a=rama, b=ramb, c=ramc, d=ramd, e=rame, f=ramf, g=ramg, h=ramh,
    sel=address[3..5], out=out);
}
